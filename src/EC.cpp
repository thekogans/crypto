// Copyright 2011 Boris Kogan (boris@thekogans.net)
//
// This file is part of libthekogans_crypto.
//
// libthekogans_crypto is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// libthekogans_crypto is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with libthekogans_crypto. If not, see <http://www.gnu.org/licenses/>.

#include "thekogans/util/Exception.h"
#include "thekogans/crypto/OpenSSLInit.h"
#include "thekogans/crypto/OpenSSLException.h"
#include "thekogans/crypto/OpenSSLParams.h"
#include "thekogans/crypto/Ed25519Params.h"
#include "thekogans/crypto/X25519Params.h"
#include "thekogans/crypto/EC.h"

namespace thekogans {
    namespace crypto {

    #if OPENSSL_VERSION_NUMBER < 0x10100000L
        #define OPENSSL_EC_EXPLICIT_CURVE 0x000
    #endif // OPENSSL_VERSION_NUMBER < 0x10100000L

        Params::SharedPtr EC::ParamsFromGFpCurve (
                const BIGNUM &p,
                const BIGNUM &a,
                const BIGNUM &b,
                const BIGNUM &gx,
                const BIGNUM &gy,
                const BIGNUM &n,
                const BIGNUM &c,
                const ID &id,
                const std::string &name,
                const std::string &description) {
            BN_CTXPtr ctx (BN_CTX_new ());
            if (ctx != nullptr) {
                EC_GROUPPtr curve (EC_GROUP_new_curve_GFp (&p, &a, &b, ctx.get ()));
                if (curve != nullptr) {
                    EC_GROUP_set_asn1_flag (curve.get (), OPENSSL_EC_EXPLICIT_CURVE);
                    EC_POINTPtr generator (EC_POINT_new (curve.get ()));
                    if (generator != nullptr &&
                            EC_POINT_set_affine_coordinates_GFp (curve.get (),
                                generator.get (), &gx, &gy, ctx.get ()) == 1 &&
                            EC_GROUP_set_generator (curve.get (), generator.get (), &n, &c) == 1) {
                        EC_KEYPtr ecParams (EC_KEY_new ());
                        if (ecParams != nullptr) {
                            EC_KEY_set_group (ecParams.get (), curve.get ());
                            EVP_PKEYPtr params (EVP_PKEY_new ());
                            if (params != nullptr &&
                                    EVP_PKEY_assign_EC_KEY (params.get (), ecParams.get ()) == 1) {
                                ecParams.release ();
                                return Params::SharedPtr (
                                    new OpenSSLParams (std::move (params), id, name, description));
                            }
                            else {
                                THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
                            }
                        }
                        else {
                            THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
                        }
                    }
                    else {
                        THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
                    }
                }
                else {
                    THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
                }
            }
            else {
                THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
            }
        }

        Params::SharedPtr EC::ParamsFromNamedCurve (
                util::i32 nid,
                const ID &id,
                const std::string &name,
                const std::string &description) {
            EVP_PKEY *params = 0;
            EVP_PKEY_CTXPtr ctx (EVP_PKEY_CTX_new_id (EVP_PKEY_EC, OpenSSLInit::engine));
            if (ctx != nullptr &&
                    EVP_PKEY_paramgen_init (ctx.get ()) == 1 &&
                    EVP_PKEY_CTX_set_ec_paramgen_curve_nid (ctx.get (), nid) == 1 &&
                    EVP_PKEY_CTX_set_ec_param_enc (ctx.get (), OPENSSL_EC_NAMED_CURVE) == 1 &&
                    EVP_PKEY_paramgen (ctx.get (), &params) == 1) {
                return Params::SharedPtr (new OpenSSLParams (EVP_PKEYPtr (params), id, name, description));
            }
            else {
                THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
            }
        }

        namespace {
            struct EllipticCurve {
                const util::ui8 *p;
                util::i32 pLength;
                const util::ui8 *a;
                util::i32 aLength;
                const util::ui8 *b;
                util::i32 bLength;
                const util::ui8 *gx;
                util::i32 gxLength;
                const util::ui8 *gy;
                util::i32 gyLength;
                const util::ui8 *n;
                util::i32 nLength;
                const util::ui8 *c;
                util::i32 cLength;
            };

            Params::SharedPtr ParamsFromEllipticCurve (
                    const EllipticCurve &curve,
                    const ID &id,
                    const std::string &name,
                    const std::string &description) {
                BIGNUMPtr p (BN_new ());
                BIGNUMPtr a (BN_new ());
                BIGNUMPtr b (BN_new ());
                BIGNUMPtr gx (BN_new ());
                BIGNUMPtr gy (BN_new ());
                BIGNUMPtr n (BN_new ());
                BIGNUMPtr c (BN_new ());
                if (p != nullptr &&
                        a != nullptr && b != nullptr &&
                        gx != nullptr && gy != nullptr &&
                        n != nullptr &&
                        c != nullptr) {
                    BN_bin2bn (curve.p, curve.pLength, p.get ());
                    BN_bin2bn (curve.a, curve.aLength, a.get ());
                    BN_bin2bn (curve.b, curve.bLength, b.get ());
                    BN_bin2bn (curve.gx, curve.gxLength, gx.get ());
                    BN_bin2bn (curve.gy, curve.gyLength, gy.get ());
                    BN_bin2bn (curve.n, curve.nLength, n.get ());
                    BN_bin2bn (curve.c, curve.cLength, c.get ());
                    return EC::ParamsFromGFpCurve (*p, *a, *b, *gx, *gy, *n, *c, id, name, description);
                }
                else {
                    THEKOGANS_CRYPTO_THROW_OPENSSL_EXCEPTION;
                }
            }

            // RFC5114_CURVE_192
            const util::ui8 RFC5114_192_P[24] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            };

            const util::ui8 RFC5114_192_A[24] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC
            };

            const util::ui8 RFC5114_192_B[24] = {
                0x64, 0x21, 0x05, 0x19, 0xE5, 0x9C, 0x80, 0xE7,
                0x0F, 0xA7, 0xE9, 0xAB, 0x72, 0x24, 0x30, 0x49,
                0xFE, 0xB8, 0xDE, 0xEC, 0xC1, 0x46, 0xB9, 0xB1
            };

            const util::ui8 RFC5114_192_GX[24] = {
                0x18, 0x8D, 0xA8, 0x0E, 0xB0, 0x30, 0x90, 0xF6,
                0x7C, 0xBF, 0x20, 0xEB, 0x43, 0xA1, 0x88, 0x00,
                0xF4, 0xFF, 0x0A, 0xFD, 0x82, 0xFF, 0x10, 0x12
            };

            const util::ui8 RFC5114_192_GY[24] = {
                0x07, 0x19, 0x2B, 0x95, 0xFF, 0xC8, 0xDA, 0x78,
                0x63, 0x10, 0x11, 0xED, 0x6B, 0x24, 0xCD, 0xD5,
                0x73, 0xF9, 0x77, 0xA1, 0x1E, 0x79, 0x48, 0x11
            };

            const util::ui8 RFC5114_192_N[24] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0x99, 0xDE, 0xF8, 0x36,
                0x14, 0x6B, 0xC9, 0xB1, 0xB4, 0xD2, 0x28, 0x31
            };

            const util::ui8 RFC5114_192_C[1] = {
                0x01
            };

            // RFC5114_CURVE_224
            const util::ui8 RFC5114_224_P[28] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
            };

            const util::ui8 RFC5114_224_A[28] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE
            };

            const util::ui8 RFC5114_224_B[28] = {
                0xB4, 0x05, 0x0A, 0x85, 0x0C, 0x04, 0xB3,
                0xAB, 0xF5, 0x41, 0x32, 0x56, 0x50, 0x44,
                0xB0, 0xB7, 0xD7, 0xBF, 0xD8, 0xBA, 0x27,
                0x0B, 0x39, 0x43, 0x23, 0x55, 0xFF, 0xB4
            };

            const util::ui8 RFC5114_224_GX[28] = {
                0xB7, 0x0E, 0x0C, 0xBD, 0x6B, 0xB4, 0xBF,
                0x7F, 0x32, 0x13, 0x90, 0xB9, 0x4A, 0x03,
                0xC1, 0xD3, 0x56, 0xC2, 0x11, 0x22, 0x34,
                0x32, 0x80, 0xD6, 0x11, 0x5C, 0x1D, 0x21
            };

            const util::ui8 RFC5114_224_GY[28] = {
                0xBD, 0x37, 0x63, 0x88, 0xB5, 0xF7, 0x23,
                0xFB, 0x4C, 0x22, 0xDF, 0xE6, 0xCD, 0x43,
                0x75, 0xA0, 0x5A, 0x07, 0x47, 0x64, 0x44,
                0xD5, 0x81, 0x99, 0x85, 0x00, 0x7E, 0x34
            };

            const util::ui8 RFC5114_224_N[28] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0x16, 0xA2, 0xE0, 0xB8, 0xF0, 0x3E, 0x13,
                0xDD, 0x29, 0x45, 0x5C, 0x5C, 0x2A, 0x3D
            };

            const util::ui8 RFC5114_224_C[1] = {
                0x01
            };

            // RFC5114_CURVE_256
            const util::ui8 RFC5114_256_P[32] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            };

            const util::ui8 RFC5114_256_A[32] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC
            };

            const util::ui8 RFC5114_256_B[32] = {
                0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7,
                0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC,
                0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6,
                0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B
            };

            const util::ui8 RFC5114_256_GX[32] = {
                0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47,
                0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2,
                0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0,
                0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96
            };

            const util::ui8 RFC5114_256_GY[32] = {
                0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B,
                0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16,
                0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE,
                0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5
            };

            const util::ui8 RFC5114_256_N[32] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84,
                0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51
            };

            const util::ui8 RFC5114_256_C[1] = {
                0x01
            };

            // RFC5114_CURVE_384
            const util::ui8 RFC5114_384_P[48] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
            };

            const util::ui8 RFC5114_384_A[48] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
                0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC
            };

            const util::ui8 RFC5114_384_B[48] = {
                0xB3, 0x31, 0x2F, 0xA7, 0xE2, 0x3E, 0xE7, 0xE4,
                0x98, 0x8E, 0x05, 0x6B, 0xE3, 0xF8, 0x2D, 0x19,
                0x18, 0x1D, 0x9C, 0x6E, 0xFE, 0x81, 0x41, 0x12,
                0x03, 0x14, 0x08, 0x8F, 0x50, 0x13, 0x87, 0x5A,
                0xC6, 0x56, 0x39, 0x8D, 0x8A, 0x2E, 0xD1, 0x9D,
                0x2A, 0x85, 0xC8, 0xED, 0xD3, 0xEC, 0x2A, 0xEF
            };

            const util::ui8 RFC5114_384_GX[48] = {
                0xAA, 0x87, 0xCA, 0x22, 0xBE, 0x8B, 0x05, 0x37,
                0x8E, 0xB1, 0xC7, 0x1E, 0xF3, 0x20, 0xAD, 0x74,
                0x6E, 0x1D, 0x3B, 0x62, 0x8B, 0xA7, 0x9B, 0x98,
                0x59, 0xF7, 0x41, 0xE0, 0x82, 0x54, 0x2A, 0x38,
                0x55, 0x02, 0xF2, 0x5D, 0xBF, 0x55, 0x29, 0x6C,
                0x3A, 0x54, 0x5E, 0x38, 0x72, 0x76, 0x0A, 0xB7
            };

            const util::ui8 RFC5114_384_GY[48] = {
                0x36, 0x17, 0xDE, 0x4A, 0x96, 0x26, 0x2C, 0x6F,
                0x5D, 0x9E, 0x98, 0xBF, 0x92, 0x92, 0xDC, 0x29,
                0xF8, 0xF4, 0x1D, 0xBD, 0x28, 0x9A, 0x14, 0x7C,
                0xE9, 0xDA, 0x31, 0x13, 0xB5, 0xF0, 0xB8, 0xC0,
                0x0A, 0x60, 0xB1, 0xCE, 0x1D, 0x7E, 0x81, 0x9D,
                0x7A, 0x43, 0x1D, 0x7C, 0x90, 0xEA, 0x0E, 0x5F
            };

            const util::ui8 RFC5114_384_N[48] = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xC7, 0x63, 0x4D, 0x81, 0xF4, 0x37, 0x2D, 0xDF,
                0x58, 0x1A, 0x0D, 0xB2, 0x48, 0xB0, 0xA7, 0x7A,
                0xEC, 0xEC, 0x19, 0x6A, 0xCC, 0xC5, 0x29, 0x73
            };

            const util::ui8 RFC5114_384_C[1] = {
                0x01
            };

            // RFC5114_CURVE_521
            const util::ui8 RFC5114_521_P[68] = {
                0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            };

            const util::ui8 RFC5114_521_A[68] = {
                0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC
            };

            const util::ui8 RFC5114_521_B[68] = {
                0x00, 0x00, 0x00, 0x51, 0x95, 0x3E, 0xB9, 0x61, 0x8E, 0x1C, 0x9A, 0x1F, 0x92, 0x9A, 0x21, 0xA0, 0xB6,
                0x85, 0x40, 0xEE, 0xA2, 0xDA, 0x72, 0x5B, 0x99, 0xB3, 0x15, 0xF3, 0xB8, 0xB4, 0x89, 0x91, 0x8E, 0xF1,
                0x09, 0xE1, 0x56, 0x19, 0x39, 0x51, 0xEC, 0x7E, 0x93, 0x7B, 0x16, 0x52, 0xC0, 0xBD, 0x3B, 0xB1, 0xBF,
                0x07, 0x35, 0x73, 0xDF, 0x88, 0x3D, 0x2C, 0x34, 0xF1, 0xEF, 0x45, 0x1F, 0xD4, 0x6B, 0x50, 0x3F, 0x00
            };

            const util::ui8 RFC5114_521_GX[68] = {
                0x00, 0x00, 0x00, 0xC6, 0x85, 0x8E, 0x06, 0xB7, 0x04, 0x04, 0xE9, 0xCD, 0x9E, 0x3E, 0xCB, 0x66, 0x23,
                0x95, 0xB4, 0x42, 0x9C, 0x64, 0x81, 0x39, 0x05, 0x3F, 0xB5, 0x21, 0xF8, 0x28, 0xAF, 0x60, 0x6B, 0x4D,
                0x3D, 0xBA, 0xA1, 0x4B, 0x5E, 0x77, 0xEF, 0xE7, 0x59, 0x28, 0xFE, 0x1D, 0xC1, 0x27, 0xA2, 0xFF, 0xA8,
                0xDE, 0x33, 0x48, 0xB3, 0xC1, 0x85, 0x6A, 0x42, 0x9B, 0xF9, 0x7E, 0x7E, 0x31, 0xC2, 0xE5, 0xBD, 0x66
            };

            const util::ui8 RFC5114_521_GY[68] = {
                0x00, 0x00, 0x01, 0x18, 0x39, 0x29, 0x6A, 0x78, 0x9A, 0x3B, 0xC0, 0x04, 0x5C, 0x8A, 0x5F, 0xB4, 0x2C,
                0x7D, 0x1B, 0xD9, 0x98, 0xF5, 0x44, 0x49, 0x57, 0x9B, 0x44, 0x68, 0x17, 0xAF, 0xBD, 0x17, 0x27, 0x3E,
                0x66, 0x2C, 0x97, 0xEE, 0x72, 0x99, 0x5E, 0xF4, 0x26, 0x40, 0xC5, 0x50, 0xB9, 0x01, 0x3F, 0xAD, 0x07,
                0x61, 0x35, 0x3C, 0x70, 0x86, 0xA2, 0x72, 0xC2, 0x40, 0x88, 0xBE, 0x94, 0x76, 0x9F, 0xD1, 0x66, 0x50
            };

            const util::ui8 RFC5114_521_N[68] = {
                0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFA, 0x51, 0x86, 0x87, 0x83, 0xBF, 0x2F, 0x96, 0x6B, 0x7F, 0xCC, 0x01, 0x48, 0xF7, 0x09, 0xA5,
                0xD0, 0x3B, 0xB5, 0xC9, 0xB8, 0x89, 0x9C, 0x47, 0xAE, 0xBB, 0x6F, 0xB7, 0x1E, 0x91, 0x38, 0x64, 0x09
            };

            const util::ui8 RFC5114_521_C[1] = {
                0x01
            };

            EllipticCurve rfc5114curves[] = {
                {RFC5114_192_P, 24,
                 RFC5114_192_A, 24,
                 RFC5114_192_B, 24,
                 RFC5114_192_GX, 24,
                 RFC5114_192_GY, 24,
                 RFC5114_192_N, 24,
                 RFC5114_192_C, 1},
                {RFC5114_224_P, 28,
                 RFC5114_224_A, 28,
                 RFC5114_224_B, 28,
                 RFC5114_224_GX, 28,
                 RFC5114_224_GY, 28,
                 RFC5114_224_N, 28,
                 RFC5114_224_C, 1},
                {RFC5114_256_P, 32,
                 RFC5114_256_A, 32,
                 RFC5114_256_B, 32,
                 RFC5114_256_GX, 32,
                 RFC5114_256_GY, 32,
                 RFC5114_256_N, 32,
                 RFC5114_256_C, 1},
                {RFC5114_384_P, 48,
                 RFC5114_384_A, 48,
                 RFC5114_384_B, 48,
                 RFC5114_384_GX, 48,
                 RFC5114_384_GY, 48,
                 RFC5114_384_N, 48,
                 RFC5114_384_C, 1},
                {RFC5114_521_P, 68,
                 RFC5114_521_A, 68,
                 RFC5114_521_B, 68,
                 RFC5114_521_GX, 68,
                 RFC5114_521_GY, 68,
                 RFC5114_521_N, 68,
                 RFC5114_521_C, 1}
            };
        }

        Params::SharedPtr EC::ParamsFromRFC5114Curve (
                RFC5114Curve curve,
                const ID &id,
                const std::string &name,
                const std::string &description) {
            return ParamsFromEllipticCurve (rfc5114curves[curve], id, name, description);
        }

        namespace {
            // RFC5639_CURVE_160,
            const util::ui8 RFC5639_160_P[20] = {
                0xE9, 0x5E, 0x4A, 0x5F, 0x73, 0x70, 0x59, 0xDC, 0x60, 0xDF,
                0xC7, 0xAD, 0x95, 0xB3, 0xD8, 0x13, 0x95, 0x15, 0x62, 0x0F
            };

            const util::ui8 RFC5639_160_A[20] = {
                0x34, 0x0E, 0x7B, 0xE2, 0xA2, 0x80, 0xEB, 0x74, 0xE2, 0xBE,
                0x61, 0xBA, 0xDA, 0x74, 0x5D, 0x97, 0xE8, 0xF7, 0xC3, 0x00
            };

            const util::ui8 RFC5639_160_B[20] = {
                0x1E, 0x58, 0x9A, 0x85, 0x95, 0x42, 0x34, 0x12, 0x13, 0x4F,
                0xAA, 0x2D, 0xBD, 0xEC, 0x95, 0xC8, 0xD8, 0x67, 0x5E, 0x58
            };

            const util::ui8 RFC5639_160_GX[20] = {
                0xBE, 0xD5, 0xAF, 0x16, 0xEA, 0x3F, 0x6A, 0x4F, 0x62, 0x93,
                0x8C, 0x46, 0x31, 0xEB, 0x5A, 0xF7, 0xBD, 0xBC, 0xDB, 0xC3
            };

            const util::ui8 RFC5639_160_GY[20] = {
                0x16, 0x67, 0xCB, 0x47, 0x7A, 0x1A, 0x8E, 0xC3, 0x38, 0xF9,
                0x47, 0x41, 0x66, 0x9C, 0x97, 0x63, 0x16, 0xDA, 0x63, 0x21
            };

            const util::ui8 RFC5639_160_N[20] = {
                0xE9, 0x5E, 0x4A, 0x5F, 0x73, 0x70, 0x59, 0xDC, 0x60, 0xDF,
                0x59, 0x91, 0xD4, 0x50, 0x29, 0x40, 0x9E, 0x60, 0xFC, 0x09
            };

            const util::ui8 RFC5639_160_C[1] = {
                0x01
            };

            // RFC5639_CURVE_160_T
            const util::ui8 RFC5639_160_P_T[20] = {
                0xE9, 0x5E, 0x4A, 0x5F, 0x73, 0x70, 0x59, 0xDC, 0x60, 0xDF,
                0xC7, 0xAD, 0x95, 0xB3, 0xD8, 0x13, 0x95, 0x15, 0x62, 0x0F
            };

            const util::ui8 RFC5639_160_A_T[20] = {
                0xE9, 0x5E, 0x4A, 0x5F, 0x73, 0x70, 0x59, 0xDC, 0x60, 0xDF,
                0xC7, 0xAD, 0x95, 0xB3, 0xD8, 0x13, 0x95, 0x15, 0x62, 0x0C
            };

            const util::ui8 RFC5639_160_B_T[20] = {
                0x7A, 0x55, 0x6B, 0x6D, 0xAE, 0x53, 0x5B, 0x7B, 0x51, 0xED,
                0x2C, 0x4D, 0x7D, 0xAA, 0x7A, 0x0B, 0x5C, 0x55, 0xF3, 0x80
            };

            const util::ui8 RFC5639_160_GX_T[20] = {
                0xB1, 0x99, 0xB1, 0x3B, 0x9B, 0x34, 0xEF, 0xC1, 0x39, 0x7E,
                0x64, 0xBA, 0xEB, 0x05, 0xAC, 0xC2, 0x65, 0xFF, 0x23, 0x78
            };

            const util::ui8 RFC5639_160_GY_T[20] = {
                0xAD, 0xD6, 0x71, 0x8B, 0x7C, 0x7C, 0x19, 0x61, 0xF0, 0x99,
                0x1B, 0x84, 0x24, 0x43, 0x77, 0x21, 0x52, 0xC9, 0xE0, 0xAD
            };

            const util::ui8 RFC5639_160_N_T[20] = {
                0xE9, 0x5E, 0x4A, 0x5F, 0x73, 0x70, 0x59, 0xDC, 0x60, 0xDF,
                0x59, 0x91, 0xD4, 0x50, 0x29, 0x40, 0x9E, 0x60, 0xFC, 0x09
            };

            const util::ui8 RFC5639_160_C_T[1] = {
                0x01
            };

            // RFC5639_CURVE_192
            const util::ui8 RFC5639_192_P[24] = {
                0xC3, 0x02, 0xF4, 0x1D, 0x93, 0x2A, 0x36, 0xCD,
                0xA7, 0xA3, 0x46, 0x30, 0x93, 0xD1, 0x8D, 0xB7,
                0x8F, 0xCE, 0x47, 0x6D, 0xE1, 0xA8, 0x62, 0x97
            };

            const util::ui8 RFC5639_192_A[24] = {
                0x6A, 0x91, 0x17, 0x40, 0x76, 0xB1, 0xE0, 0xE1,
                0x9C, 0x39, 0xC0, 0x31, 0xFE, 0x86, 0x85, 0xC1,
                0xCA, 0xE0, 0x40, 0xE5, 0xC6, 0x9A, 0x28, 0xEF
            };

            const util::ui8 RFC5639_192_B[24] = {
                0x46, 0x9A, 0x28, 0xEF, 0x7C, 0x28, 0xCC, 0xA3,
                0xDC, 0x72, 0x1D, 0x04, 0x4F, 0x44, 0x96, 0xBC,
                0xCA, 0x7E, 0xF4, 0x14, 0x6F, 0xBF, 0x25, 0xC9
            };

            const util::ui8 RFC5639_192_GX[24] = {
                0xC0, 0xA0, 0x64, 0x7E, 0xAA, 0xB6, 0xA4, 0x87,
                0x53, 0xB0, 0x33, 0xC5, 0x6C, 0xB0, 0xF0, 0x90,
                0x0A, 0x2F, 0x5C, 0x48, 0x53, 0x37, 0x5F, 0xD6
            };

            const util::ui8 RFC5639_192_GY[24] = {
                0x14, 0xB6, 0x90, 0x86, 0x6A, 0xBD, 0x5B, 0xB8,
                0x8B, 0x5F, 0x48, 0x28, 0xC1, 0x49, 0x00, 0x02,
                0xE6, 0x77, 0x3F, 0xA2, 0xFA, 0x29, 0x9B, 0x8F
            };

            const util::ui8 RFC5639_192_N[24] = {
                0xC3, 0x02, 0xF4, 0x1D, 0x93, 0x2A, 0x36, 0xCD,
                0xA7, 0xA3, 0x46, 0x2F, 0x9E, 0x9E, 0x91, 0x6B,
                0x5B, 0xE8, 0xF1, 0x02, 0x9A, 0xC4, 0xAC, 0xC1
            };

            const util::ui8 RFC5639_192_C[1] = {
                0x01
            };

            // RFC5639_CURVE_192_T
            const util::ui8 RFC5639_192_P_T[24] = {
                0xC3, 0x02, 0xF4, 0x1D, 0x93, 0x2A, 0x36, 0xCD,
                0xA7, 0xA3, 0x46, 0x30, 0x93, 0xD1, 0x8D, 0xB7,
                0x8F, 0xCE, 0x47, 0x6D, 0xE1, 0xA8, 0x62, 0x97
            };

            const util::ui8 RFC5639_192_A_T[24] = {
                0xC3, 0x02, 0xF4, 0x1D, 0x93, 0x2A, 0x36, 0xCD,
                0xA7, 0xA3, 0x46, 0x30, 0x93, 0xD1, 0x8D, 0xB7,
                0x8F, 0xCE, 0x47, 0x6D, 0xE1, 0xA8, 0x62, 0x94
            };

            const util::ui8 RFC5639_192_B_T[24] = {
                0x13, 0xD5, 0x6F, 0xFA, 0xEC, 0x78, 0x68, 0x1E,
                0x68, 0xF9, 0xDE, 0xB4, 0x3B, 0x35, 0xBE, 0xC2,
                0xFB, 0x68, 0x54, 0x2E, 0x27, 0x89, 0x7B, 0x79
            };

            const util::ui8 RFC5639_192_GX_T[24] = {
                0x3A, 0xE9, 0xE5, 0x8C, 0x82, 0xF6, 0x3C, 0x30,
                0x28, 0x2E, 0x1F, 0xE7, 0xBB, 0xF4, 0x3F, 0xA7,
                0x2C, 0x44, 0x6A, 0xF6, 0xF4, 0x61, 0x81, 0x29
            };

            const util::ui8 RFC5639_192_GY_T[24] = {
                0x09, 0x7E, 0x2C, 0x56, 0x67, 0xC2, 0x22, 0x3A,
                0x90, 0x2A, 0xB5, 0xCA, 0x44, 0x9D, 0x00, 0x84,
                0xB7, 0xE5, 0xB3, 0xDE, 0x7C, 0xCC, 0x01, 0xC9
            };

            const util::ui8 RFC5639_192_N_T[24] = {
                0xC3, 0x02, 0xF4, 0x1D, 0x93, 0x2A, 0x36, 0xCD,
                0xA7, 0xA3, 0x46, 0x2F, 0x9E, 0x9E, 0x91, 0x6B,
                0x5B, 0xE8, 0xF1, 0x02, 0x9A, 0xC4, 0xAC, 0xC1
            };

            const util::ui8 RFC5639_192_C_T[1] = {
                0x01
            };

            // RFC5639_CURVE_224
            const util::ui8 RFC5639_224_P[28] = {
                0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66,
                0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1,
                0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97,
                0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF
            };

            const util::ui8 RFC5639_224_A[28] = {
                0x68, 0xA5, 0xE6, 0x2C, 0xA9, 0xCE, 0x6C,
                0x1C, 0x29, 0x98, 0x03, 0xA6, 0xC1, 0x53,
                0x0B, 0x51, 0x4E, 0x18, 0x2A, 0xD8, 0xB0,
                0x04, 0x2A, 0x59, 0xCA, 0xD2, 0x9F, 0x43
            };

            const util::ui8 RFC5639_224_B[28] = {
                0x25, 0x80, 0xF6, 0x3C, 0xCF, 0xE4, 0x41,
                0x38, 0x87, 0x07, 0x13, 0xB1, 0xA9, 0x23,
                0x69, 0xE3, 0x3E, 0x21, 0x35, 0xD2, 0x66,
                0xDB, 0xB3, 0x72, 0x38, 0x6C, 0x40, 0x0B
            };

            const util::ui8 RFC5639_224_GX[28] = {
                0x0D, 0x90, 0x29, 0xAD, 0x2C, 0x7E, 0x5C,
                0xF4, 0x34, 0x08, 0x23, 0xB2, 0xA8, 0x7D,
                0xC6, 0x8C, 0x9E, 0x4C, 0xE3, 0x17, 0x4C,
                0x1E, 0x6E, 0xFD, 0xEE, 0x12, 0xC0, 0x7D
            };

            const util::ui8 RFC5639_224_GY[28] = {
                0x58, 0xAA, 0x56, 0xF7, 0x72, 0xC0, 0x72,
                0x6F, 0x24, 0xC6, 0xB8, 0x9E, 0x4E, 0xCD,
                0xAC, 0x24, 0x35, 0x4B, 0x9E, 0x99, 0xCA,
                0xA3, 0xF6, 0xD3, 0x76, 0x14, 0x02, 0xCD
            };

            const util::ui8 RFC5639_224_N[28] = {
                0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66,
                0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0,
                0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D,
                0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F
            };

            const util::ui8 RFC5639_224_C[1] = {
                0x01
            };

            // RFC5639_CURVE_224_T
            const util::ui8 RFC5639_224_P_T[28] = {
                0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66,
                0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1,
                0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97,
                0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFF
            };

            const util::ui8 RFC5639_224_A_T[28] = {
                0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66,
                0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD1,
                0xD7, 0x87, 0xB0, 0x9F, 0x07, 0x57, 0x97,
                0xDA, 0x89, 0xF5, 0x7E, 0xC8, 0xC0, 0xFC
            };

            const util::ui8 RFC5639_224_B_T[28] = {
                0x4B, 0x33, 0x7D, 0x93, 0x41, 0x04, 0xCD,
                0x7B, 0xEF, 0x27, 0x1B, 0xF6, 0x0C, 0xED,
                0x1E, 0xD2, 0x0D, 0xA1, 0x4C, 0x08, 0xB3,
                0xBB, 0x64, 0xF1, 0x8A, 0x60, 0x88, 0x8D
            };

            const util::ui8 RFC5639_224_GX_T[28] = {
                0x6A, 0xB1, 0xE3, 0x44, 0xCE, 0x25, 0xFF,
                0x38, 0x96, 0x42, 0x4E, 0x7F, 0xFE, 0x14,
                0x76, 0x2E, 0xCB, 0x49, 0xF8, 0x92, 0x8A,
                0xC0, 0xC7, 0x60, 0x29, 0xB4, 0xD5, 0x80
            };

            const util::ui8 RFC5639_224_GY_T[28] = {
                0x03, 0x74, 0xE9, 0xF5, 0x14, 0x3E, 0x56,
                0x8C, 0xD2, 0x3F, 0x3F, 0x4D, 0x7C, 0x0D,
                0x4B, 0x1E, 0x41, 0xC8, 0xCC, 0x0D, 0x1C,
                0x6A, 0xBD, 0x5F, 0x1A, 0x46, 0xDB, 0x4C
            };

            const util::ui8 RFC5639_224_N_T[28] = {
                0xD7, 0xC1, 0x34, 0xAA, 0x26, 0x43, 0x66,
                0x86, 0x2A, 0x18, 0x30, 0x25, 0x75, 0xD0,
                0xFB, 0x98, 0xD1, 0x16, 0xBC, 0x4B, 0x6D,
                0xDE, 0xBC, 0xA3, 0xA5, 0xA7, 0x93, 0x9F
            };

            const util::ui8 RFC5639_224_C_T[1] = {
                0x01
            };

            // RFC5639_CURVE_256
            const util::ui8 RFC5639_256_P[32] = {
                0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
                0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72,
                0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28,
                0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77
            };

            const util::ui8 RFC5639_256_A[32] = {
                0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57,
                0xEE, 0xF6, 0x75, 0x30, 0x41, 0x7A, 0xFF, 0xE7,
                0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C,
                0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9
            };

            const util::ui8 RFC5639_256_B[32] = {
                0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44,
                0xF3, 0x30, 0xB5, 0xD9, 0xBB, 0xD7, 0x7C, 0xBF,
                0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE,
                0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6
            };

            const util::ui8 RFC5639_256_GX[32] = {
                0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB,
                0x2C, 0x4B, 0x48, 0x2F, 0xFC, 0x81, 0xB7, 0xAF,
                0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2,
                0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62
            };

            const util::ui8 RFC5639_256_GY[32] = {
                0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD,
                0x97, 0xF8, 0x46, 0x1A, 0x14, 0x61, 0x1D, 0xC9,
                0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54,
                0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97
            };

            const util::ui8 RFC5639_256_N[32] = {
                0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
                0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71,
                0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7,
                0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7
            };

            const util::ui8 RFC5639_256_C[1] = {
                0x01
            };

            // RFC5639_CURVE_256_T
            const util::ui8 RFC5639_256_P_T[32] = {
                0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
                0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72,
                0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28,
                0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77
            };

            const util::ui8 RFC5639_256_A_T[32] = {
                0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
                0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x72,
                0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28,
                0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x74
            };

            const util::ui8 RFC5639_256_B_T[32] = {
                0x66, 0x2C, 0x61, 0xC4, 0x30, 0xD8, 0x4E, 0xA4,
                0xFE, 0x66, 0xA7, 0x73, 0x3D, 0x0B, 0x76, 0xB7,
                0xBF, 0x93, 0xEB, 0xC4, 0xAF, 0x2F, 0x49, 0x25,
                0x6A, 0xE5, 0x81, 0x01, 0xFE, 0xE9, 0x2B, 0x04
            };

            const util::ui8 RFC5639_256_GX_T[32] = {
                0xA3, 0xE8, 0xEB, 0x3C, 0xC1, 0xCF, 0xE7, 0xB7,
                0x73, 0x22, 0x13, 0xB2, 0x3A, 0x65, 0x61, 0x49,
                0xAF, 0xA1, 0x42, 0xC4, 0x7A, 0xAF, 0xBC, 0x2B,
                0x79, 0xA1, 0x91, 0x56, 0x2E, 0x13, 0x05, 0xF4
            };

            const util::ui8 RFC5639_256_GY_T[32] = {
                0x2D, 0x99, 0x6C, 0x82, 0x34, 0x39, 0xC5, 0x6D,
                0x7F, 0x7B, 0x22, 0xE1, 0x46, 0x44, 0x41, 0x7E,
                0x69, 0xBC, 0xB6, 0xDE, 0x39, 0xD0, 0x27, 0x00,
                0x1D, 0xAB, 0xE8, 0xF3, 0x5B, 0x25, 0xC9, 0xBE
            };

            const util::ui8 RFC5639_256_N_T[32] = {
                0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC,
                0x3E, 0x66, 0x0A, 0x90, 0x9D, 0x83, 0x8D, 0x71,
                0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7,
                0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7
            };

            const util::ui8 RFC5639_256_C_T[1] = {
                0x01
            };

            // RFC5639_CURVE_320
            const util::ui8 RFC5639_320_P[40] = {
                0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7,
                0xE1, 0x3C, 0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65,
                0xF9, 0x8F, 0xCF, 0xA6, 0xF6, 0xF4, 0x0D, 0xEF,
                0x4F, 0x92, 0xB9, 0xEC, 0x78, 0x93, 0xEC, 0x28,
                0xFC, 0xD4, 0x12, 0xB1, 0xF1, 0xB3, 0x2E, 0x27
            };

            const util::ui8 RFC5639_320_A[40] = {
                0x3E, 0xE3, 0x0B, 0x56, 0x8F, 0xBA, 0xB0, 0xF8,
                0x83, 0xCC, 0xEB, 0xD4, 0x6D, 0x3F, 0x3B, 0xB8,
                0xA2, 0xA7, 0x35, 0x13, 0xF5, 0xEB, 0x79, 0xDA,
                0x66, 0x19, 0x0E, 0xB0, 0x85, 0xFF, 0xA9, 0xF4,
                0x92, 0xF3, 0x75, 0xA9, 0x7D, 0x86, 0x0E, 0xB4
            };

            const util::ui8 RFC5639_320_B[40] = {
                0x52, 0x08, 0x83, 0x94, 0x9D, 0xFD, 0xBC, 0x42,
                0xD3, 0xAD, 0x19, 0x86, 0x40, 0x68, 0x8A, 0x6F,
                0xE1, 0x3F, 0x41, 0x34, 0x95, 0x54, 0xB4, 0x9A,
                0xCC, 0x31, 0xDC, 0xCD, 0x88, 0x45, 0x39, 0x81,
                0x6F, 0x5E, 0xB4, 0xAC, 0x8F, 0xB1, 0xF1, 0xA6
            };

            const util::ui8 RFC5639_320_GX[40] = {
                0x43, 0xBD, 0x7E, 0x9A, 0xFB, 0x53, 0xD8, 0xB8,
                0x52, 0x89, 0xBC, 0xC4, 0x8E, 0xE5, 0xBF, 0xE6,
                0xF2, 0x01, 0x37, 0xD1, 0x0A, 0x08, 0x7E, 0xB6,
                0xE7, 0x87, 0x1E, 0x2A, 0x10, 0xA5, 0x99, 0xC7,
                0x10, 0xAF, 0x8D, 0x0D, 0x39, 0xE2, 0x06, 0x11
            };

            const util::ui8 RFC5639_320_GY[40] = {
                0x14, 0xFD, 0xD0, 0x55, 0x45, 0xEC, 0x1C, 0xC8,
                0xAB, 0x40, 0x93, 0x24, 0x7F, 0x77, 0x27, 0x5E,
                0x07, 0x43, 0xFF, 0xED, 0x11, 0x71, 0x82, 0xEA,
                0xA9, 0xC7, 0x78, 0x77, 0xAA, 0xAC, 0x6A, 0xC7,
                0xD3, 0x52, 0x45, 0xD1, 0x69, 0x2E, 0x8E, 0xE1
            };

            const util::ui8 RFC5639_320_N[40] = {
                0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7,
                0xE1, 0x3C, 0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65,
                0xF9, 0x8F, 0xCF, 0xA5, 0xB6, 0x8F, 0x12, 0xA3,
                0x2D, 0x48, 0x2E, 0xC7, 0xEE, 0x86, 0x58, 0xE9,
                0x86, 0x91, 0x55, 0x5B, 0x44, 0xC5, 0x93, 0x11
            };

            const util::ui8 RFC5639_320_C[1] = {
                0x01
            };

            // RFC5639_CURVE_320_T
            const util::ui8 RFC5639_320_P_T[40] = {
                0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7,
                0xE1, 0x3C, 0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65,
                0xF9, 0x8F, 0xCF, 0xA6, 0xF6, 0xF4, 0x0D, 0xEF,
                0x4F, 0x92, 0xB9, 0xEC, 0x78, 0x93, 0xEC, 0x28,
                0xFC, 0xD4, 0x12, 0xB1, 0xF1, 0xB3, 0x2E, 0x27
            };

            const util::ui8 RFC5639_320_A_T[40] = {
                0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7,
                0xE1, 0x3C, 0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65,
                0xF9, 0x8F, 0xCF, 0xA6, 0xF6, 0xF4, 0x0D, 0xEF,
                0x4F, 0x92, 0xB9, 0xEC, 0x78, 0x93, 0xEC, 0x28,
                0xFC, 0xD4, 0x12, 0xB1, 0xF1, 0xB3, 0x2E, 0x24
            };

            const util::ui8 RFC5639_320_B_T[40] = {
                0xA7, 0xF5, 0x61, 0xE0, 0x38, 0xEB, 0x1E, 0xD5,
                0x60, 0xB3, 0xD1, 0x47, 0xDB, 0x78, 0x20, 0x13,
                0x06, 0x4C, 0x19, 0xF2, 0x7E, 0xD2, 0x7C, 0x67,
                0x80, 0xAA, 0xF7, 0x7F, 0xB8, 0xA5, 0x47, 0xCE,
                0xB5, 0xB4, 0xFE, 0xF4, 0x22, 0x34, 0x03, 0x53
            };

            const util::ui8 RFC5639_320_GX_T[40] = {
                0x92, 0x5B, 0xE9, 0xFB, 0x01, 0xAF, 0xC6, 0xFB,
                0x4D, 0x3E, 0x7D, 0x49, 0x90, 0x01, 0x0F, 0x81,
                0x34, 0x08, 0xAB, 0x10, 0x6C, 0x4F, 0x09, 0xCB,
                0x7E, 0xE0, 0x78, 0x68, 0xCC, 0x13, 0x6F, 0xFF,
                0x33, 0x57, 0xF6, 0x24, 0xA2, 0x1B, 0xED, 0x52
            };

            const util::ui8 RFC5639_320_GY_T[40] = {
                0x63, 0xBA, 0x3A, 0x7A, 0x27, 0x48, 0x3E, 0xBF,
                0x66, 0x71, 0xDB, 0xEF, 0x7A, 0xBB, 0x30, 0xEB,
                0xEE, 0x08, 0x4E, 0x58, 0xA0, 0xB0, 0x77, 0xAD,
                0x42, 0xA5, 0xA0, 0x98, 0x9D, 0x1E, 0xE7, 0x1B,
                0x1B, 0x9B, 0xC0, 0x45, 0x5F, 0xB0, 0xD2, 0xC3
            };

            const util::ui8 RFC5639_320_N_T[40] = {
                0xD3, 0x5E, 0x47, 0x20, 0x36, 0xBC, 0x4F, 0xB7,
                0xE1, 0x3C, 0x78, 0x5E, 0xD2, 0x01, 0xE0, 0x65,
                0xF9, 0x8F, 0xCF, 0xA5, 0xB6, 0x8F, 0x12, 0xA3,
                0x2D, 0x48, 0x2E, 0xC7, 0xEE, 0x86, 0x58, 0xE9,
                0x86, 0x91, 0x55, 0x5B, 0x44, 0xC5, 0x93, 0x11
            };

            const util::ui8 RFC5639_320_C_T[1] = {
                0x01
            };

            // RFC5639_CURVE_384
            const util::ui8 RFC5639_384_P[48] = {
                0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28,
                0x0F, 0x5D, 0x6F, 0x7E, 0x50, 0xE6, 0x41, 0xDF,
                0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB4,
                0x12, 0xB1, 0xDA, 0x19, 0x7F, 0xB7, 0x11, 0x23,
                0xAC, 0xD3, 0xA7, 0x29, 0x90, 0x1D, 0x1A, 0x71,
                0x87, 0x47, 0x00, 0x13, 0x31, 0x07, 0xEC, 0x53
            };

            const util::ui8 RFC5639_384_A[48] = {
                0x7B, 0xC3, 0x82, 0xC6, 0x3D, 0x8C, 0x15, 0x0C,
                0x3C, 0x72, 0x08, 0x0A, 0xCE, 0x05, 0xAF, 0xA0,
                0xC2, 0xBE, 0xA2, 0x8E, 0x4F, 0xB2, 0x27, 0x87,
                0x13, 0x91, 0x65, 0xEF, 0xBA, 0x91, 0xF9, 0x0F,
                0x8A, 0xA5, 0x81, 0x4A, 0x50, 0x3A, 0xD4, 0xEB,
                0x04, 0xA8, 0xC7, 0xDD, 0x22, 0xCE, 0x28, 0x26
            };

            const util::ui8 RFC5639_384_B[48] = {
                0x04, 0xA8, 0xC7, 0xDD, 0x22, 0xCE, 0x28, 0x26,
                0x8B, 0x39, 0xB5, 0x54, 0x16, 0xF0, 0x44, 0x7C,
                0x2F, 0xB7, 0x7D, 0xE1, 0x07, 0xDC, 0xD2, 0xA6,
                0x2E, 0x88, 0x0E, 0xA5, 0x3E, 0xEB, 0x62, 0xD5,
                0x7C, 0xB4, 0x39, 0x02, 0x95, 0xDB, 0xC9, 0x94,
                0x3A, 0xB7, 0x86, 0x96, 0xFA, 0x50, 0x4C, 0x11
            };

            const util::ui8 RFC5639_384_GX[48] = {
                0x1D, 0x1C, 0x64, 0xF0, 0x68, 0xCF, 0x45, 0xFF,
                0xA2, 0xA6, 0x3A, 0x81, 0xB7, 0xC1, 0x3F, 0x6B,
                0x88, 0x47, 0xA3, 0xE7, 0x7E, 0xF1, 0x4F, 0xE3,
                0xDB, 0x7F, 0xCA, 0xFE, 0x0C, 0xBD, 0x10, 0xE8,
                0xE8, 0x26, 0xE0, 0x34, 0x36, 0xD6, 0x46, 0xAA,
                0xEF, 0x87, 0xB2, 0xE2, 0x47, 0xD4, 0xAF, 0x1E
            };

            const util::ui8 RFC5639_384_GY[48] = {
                0x8A, 0xBE, 0x1D, 0x75, 0x20, 0xF9, 0xC2, 0xA4,
                0x5C, 0xB1, 0xEB, 0x8E, 0x95, 0xCF, 0xD5, 0x52,
                0x62, 0xB7, 0x0B, 0x29, 0xFE, 0xEC, 0x58, 0x64,
                0xE1, 0x9C, 0x05, 0x4F, 0xF9, 0x91, 0x29, 0x28,
                0x0E, 0x46, 0x46, 0x21, 0x77, 0x91, 0x81, 0x11,
                0x42, 0x82, 0x03, 0x41, 0x26, 0x3C, 0x53, 0x15
            };

            const util::ui8 RFC5639_384_N[48] = {
                0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28,
                0x0F, 0x5D, 0x6F, 0x7E, 0x50, 0xE6, 0x41, 0xDF,
                0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB3,
                0x1F, 0x16, 0x6E, 0x6C, 0xAC, 0x04, 0x25, 0xA7,
                0xCF, 0x3A, 0xB6, 0xAF, 0x6B, 0x7F, 0xC3, 0x10,
                0x3B, 0x88, 0x32, 0x02, 0xE9, 0x04, 0x65, 0x65
            };

            const util::ui8 RFC5639_384_C[1] = {
                0x01
            };

            // RFC5639_CURVE_384_T
            const util::ui8 RFC5639_384_P_T[48] = {
                0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28,
                0x0F, 0x5D, 0x6F, 0x7E, 0x50, 0xE6, 0x41, 0xDF,
                0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB4,
                0x12, 0xB1, 0xDA, 0x19, 0x7F, 0xB7, 0x11, 0x23,
                0xAC, 0xD3, 0xA7, 0x29, 0x90, 0x1D, 0x1A, 0x71,
                0x87, 0x47, 0x00, 0x13, 0x31, 0x07, 0xEC, 0x53
            };

            const util::ui8 RFC5639_384_A_T[48] = {
                0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28,
                0x0F, 0x5D, 0x6F, 0x7E, 0x50, 0xE6, 0x41, 0xDF,
                0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB4,
                0x12, 0xB1, 0xDA, 0x19, 0x7F, 0xB7, 0x11, 0x23,
                0xAC, 0xD3, 0xA7, 0x29, 0x90, 0x1D, 0x1A, 0x71,
                0x87, 0x47, 0x00, 0x13, 0x31, 0x07, 0xEC, 0x50
            };

            const util::ui8 RFC5639_384_B_T[48] = {
                0x7F, 0x51, 0x9E, 0xAD, 0xA7, 0xBD, 0xA8, 0x1B,
                0xD8, 0x26, 0xDB, 0xA6, 0x47, 0x91, 0x0F, 0x8C,
                0x4B, 0x93, 0x46, 0xED, 0x8C, 0xCD, 0xC6, 0x4E,
                0x4B, 0x1A, 0xBD, 0x11, 0x75, 0x6D, 0xCE, 0x1D,
                0x20, 0x74, 0xAA, 0x26, 0x3B, 0x88, 0x80, 0x5C,
                0xED, 0x70, 0x35, 0x5A, 0x33, 0xB4, 0x71, 0xEE
            };

            const util::ui8 RFC5639_384_GX_T[48] = {
                0x18, 0xDE, 0x98, 0xB0, 0x2D, 0xB9, 0xA3, 0x06,
                0xF2, 0xAF, 0xCD, 0x72, 0x35, 0xF7, 0x2A, 0x81,
                0x9B, 0x80, 0xAB, 0x12, 0xEB, 0xD6, 0x53, 0x17,
                0x24, 0x76, 0xFE, 0xCD, 0x46, 0x2A, 0xAB, 0xFF,
                0xC4, 0xFF, 0x19, 0x1B, 0x94, 0x6A, 0x5F, 0x54,
                0xD8, 0xD0, 0xAA, 0x2F, 0x41, 0x88, 0x08, 0xCC
            };

            const util::ui8 RFC5639_384_GY_T[48] = {
                0x25, 0xAB, 0x05, 0x69, 0x62, 0xD3, 0x06, 0x51,
                0xA1, 0x14, 0xAF, 0xD2, 0x75, 0x5A, 0xD3, 0x36,
                0x74, 0x7F, 0x93, 0x47, 0x5B, 0x7A, 0x1F, 0xCA,
                0x3B, 0x88, 0xF2, 0xB6, 0xA2, 0x08, 0xCC, 0xFE,
                0x46, 0x94, 0x08, 0x58, 0x4D, 0xC2, 0xB2, 0x91,
                0x26, 0x75, 0xBF, 0x5B, 0x9E, 0x58, 0x29, 0x28
            };

            const util::ui8 RFC5639_384_N_T[48] = {
                0x8C, 0xB9, 0x1E, 0x82, 0xA3, 0x38, 0x6D, 0x28,
                0x0F, 0x5D, 0x6F, 0x7E, 0x50, 0xE6, 0x41, 0xDF,
                0x15, 0x2F, 0x71, 0x09, 0xED, 0x54, 0x56, 0xB3,
                0x1F, 0x16, 0x6E, 0x6C, 0xAC, 0x04, 0x25, 0xA7,
                0xCF, 0x3A, 0xB6, 0xAF, 0x6B, 0x7F, 0xC3, 0x10,
                0x3B, 0x88, 0x32, 0x02, 0xE9, 0x04, 0x65, 0x65
            };

            const util::ui8 RFC5639_384_C_T[1] = {
                0x01
            };

            // RFC5639_CURVE_512
            const util::ui8 RFC5639_512_P[64] = {
                0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B,
                0x3F, 0xD4, 0xE6, 0xAE, 0x33, 0xC9, 0xFC, 0x07,
                0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E,
                0xD6, 0x63, 0x9C, 0xCA, 0x70, 0x33, 0x08, 0x71,
                0x7D, 0x4D, 0x9B, 0x00, 0x9B, 0xC6, 0x68, 0x42,
                0xAE, 0xCD, 0xA1, 0x2A, 0xE6, 0xA3, 0x80, 0xE6,
                0x28, 0x81, 0xFF, 0x2F, 0x2D, 0x82, 0xC6, 0x85,
                0x28, 0xAA, 0x60, 0x56, 0x58, 0x3A, 0x48, 0xF3
            };

            const util::ui8 RFC5639_512_A[64] = {
                0x78, 0x30, 0xA3, 0x31, 0x8B, 0x60, 0x3B, 0x89,
                0xE2, 0x32, 0x71, 0x45, 0xAC, 0x23, 0x4C, 0xC5,
                0x94, 0xCB, 0xDD, 0x8D, 0x3D, 0xF9, 0x16, 0x10,
                0xA8, 0x34, 0x41, 0xCA, 0xEA, 0x98, 0x63, 0xBC,
                0x2D, 0xED, 0x5D, 0x5A, 0xA8, 0x25, 0x3A, 0xA1,
                0x0A, 0x2E, 0xF1, 0xC9, 0x8B, 0x9A, 0xC8, 0xB5,
                0x7F, 0x11, 0x17, 0xA7, 0x2B, 0xF2, 0xC7, 0xB9,
                0xE7, 0xC1, 0xAC, 0x4D, 0x77, 0xFC, 0x94, 0xCA
            };

            const util::ui8 RFC5639_512_B[64] = {
                0x3D, 0xF9, 0x16, 0x10, 0xA8, 0x34, 0x41, 0xCA,
                0xEA, 0x98, 0x63, 0xBC, 0x2D, 0xED, 0x5D, 0x5A,
                0xA8, 0x25, 0x3A, 0xA1, 0x0A, 0x2E, 0xF1, 0xC9,
                0x8B, 0x9A, 0xC8, 0xB5, 0x7F, 0x11, 0x17, 0xA7,
                0x2B, 0xF2, 0xC7, 0xB9, 0xE7, 0xC1, 0xAC, 0x4D,
                0x77, 0xFC, 0x94, 0xCA, 0xDC, 0x08, 0x3E, 0x67,
                0x98, 0x40, 0x50, 0xB7, 0x5E, 0xBA, 0xE5, 0xDD,
                0x28, 0x09, 0xBD, 0x63, 0x80, 0x16, 0xF7, 0x23
            };

            const util::ui8 RFC5639_512_GX[64] = {
                0x81, 0xAE, 0xE4, 0xBD, 0xD8, 0x2E, 0xD9, 0x64,
                0x5A, 0x21, 0x32, 0x2E, 0x9C, 0x4C, 0x6A, 0x93,
                0x85, 0xED, 0x9F, 0x70, 0xB5, 0xD9, 0x16, 0xC1,
                0xB4, 0x3B, 0x62, 0xEE, 0xF4, 0xD0, 0x09, 0x8E,
                0xFF, 0x3B, 0x1F, 0x78, 0xE2, 0xD0, 0xD4, 0x8D,
                0x50, 0xD1, 0x68, 0x7B, 0x93, 0xB9, 0x7D, 0x5F,
                0x7C, 0x6D, 0x50, 0x47, 0x40, 0x6A, 0x5E, 0x68,
                0x8B, 0x35, 0x22, 0x09, 0xBC, 0xB9, 0xF8, 0x22
            };

            const util::ui8 RFC5639_512_GY[64] = {
                0x7D, 0xDE, 0x38, 0x5D, 0x56, 0x63, 0x32, 0xEC,
                0xC0, 0xEA, 0xBF, 0xA9, 0xCF, 0x78, 0x22, 0xFD,
                0xF2, 0x09, 0xF7, 0x00, 0x24, 0xA5, 0x7B, 0x1A,
                0xA0, 0x00, 0xC5, 0x5B, 0x88, 0x1F, 0x81, 0x11,
                0xB2, 0xDC, 0xDE, 0x49, 0x4A, 0x5F, 0x48, 0x5E,
                0x5B, 0xCA, 0x4B, 0xD8, 0x8A, 0x27, 0x63, 0xAE,
                0xD1, 0xCA, 0x2B, 0x2F, 0xA8, 0xF0, 0x54, 0x06,
                0x78, 0xCD, 0x1E, 0x0F, 0x3A, 0xD8, 0x08, 0x92
            };

            const util::ui8 RFC5639_512_N[64] = {
                0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B,
                0x3F, 0xD4, 0xE6, 0xAE, 0x33, 0xC9, 0xFC, 0x07,
                0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E,
                0xD6, 0x63, 0x9C, 0xCA, 0x70, 0x33, 0x08, 0x70,
                0x55, 0x3E, 0x5C, 0x41, 0x4C, 0xA9, 0x26, 0x19,
                0x41, 0x86, 0x61, 0x19, 0x7F, 0xAC, 0x10, 0x47,
                0x1D, 0xB1, 0xD3, 0x81, 0x08, 0x5D, 0xDA, 0xDD,
                0xB5, 0x87, 0x96, 0x82, 0x9C, 0xA9, 0x00, 0x69
            };

            const util::ui8 RFC5639_512_C[1] = {
                0x01
            };

            // RFC5639_CURVE_512_T
            const util::ui8 RFC5639_512_P_T[64] = {
                0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B,
                0x3F, 0xD4, 0xE6, 0xAE, 0x33, 0xC9, 0xFC, 0x07,
                0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E,
                0xD6, 0x63, 0x9C, 0xCA, 0x70, 0x33, 0x08, 0x71,
                0x7D, 0x4D, 0x9B, 0x00, 0x9B, 0xC6, 0x68, 0x42,
                0xAE, 0xCD, 0xA1, 0x2A, 0xE6, 0xA3, 0x80, 0xE6,
                0x28, 0x81, 0xFF, 0x2F, 0x2D, 0x82, 0xC6, 0x85,
                0x28, 0xAA, 0x60, 0x56, 0x58, 0x3A, 0x48, 0xF3
            };

            const util::ui8 RFC5639_512_A_T[64] = {
                0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B,
                0x3F, 0xD4, 0xE6, 0xAE, 0x33, 0xC9, 0xFC, 0x07,
                0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E,
                0xD6, 0x63, 0x9C, 0xCA, 0x70, 0x33, 0x08, 0x71,
                0x7D, 0x4D, 0x9B, 0x00, 0x9B, 0xC6, 0x68, 0x42,
                0xAE, 0xCD, 0xA1, 0x2A, 0xE6, 0xA3, 0x80, 0xE6,
                0x28, 0x81, 0xFF, 0x2F, 0x2D, 0x82, 0xC6, 0x85,
                0x28, 0xAA, 0x60, 0x56, 0x58, 0x3A, 0x48, 0xF0
            };

            const util::ui8 RFC5639_512_B_T[64] = {
                0x7C, 0xBB, 0xBC, 0xF9, 0x44, 0x1C, 0xFA, 0xB7,
                0x6E, 0x18, 0x90, 0xE4, 0x68, 0x84, 0xEA, 0xE3,
                0x21, 0xF7, 0x0C, 0x0B, 0xCB, 0x49, 0x81, 0x52,
                0x78, 0x97, 0x50, 0x4B, 0xEC, 0x3E, 0x36, 0xA6,
                0x2B, 0xCD, 0xFA, 0x23, 0x04, 0x97, 0x65, 0x40,
                0xF6, 0x45, 0x00, 0x85, 0xF2, 0xDA, 0xE1, 0x45,
                0xC2, 0x25, 0x53, 0xB4, 0x65, 0x76, 0x36, 0x89,
                0x18, 0x0E, 0xA2, 0x57, 0x18, 0x67, 0x42, 0x3E
            };

            const util::ui8 RFC5639_512_GX_T[64] = {
                0x64, 0x0E, 0xCE, 0x5C, 0x12, 0x78, 0x87, 0x17,
                0xB9, 0xC1, 0xBA, 0x06, 0xCB, 0xC2, 0xA6, 0xFE,
                0xBA, 0x85, 0x84, 0x24, 0x58, 0xC5, 0x6D, 0xDE,
                0x9D, 0xB1, 0x75, 0x8D, 0x39, 0xC0, 0x31, 0x3D,
                0x82, 0xBA, 0x51, 0x73, 0x5C, 0xDB, 0x3E, 0xA4,
                0x99, 0xAA, 0x77, 0xA7, 0xD6, 0x94, 0x3A, 0x64,
                0xF7, 0xA3, 0xF2, 0x5F, 0xE2, 0x6F, 0x06, 0xB5,
                0x1B, 0xAA, 0x26, 0x96, 0xFA, 0x90, 0x35, 0xDA
            };

            const util::ui8 RFC5639_512_GY_T[64] = {
                0x5B, 0x53, 0x4B, 0xD5, 0x95, 0xF5, 0xAF, 0x0F,
                0xA2, 0xC8, 0x92, 0x37, 0x6C, 0x84, 0xAC, 0xE1,
                0xBB, 0x4E, 0x30, 0x19, 0xB7, 0x16, 0x34, 0xC0,
                0x11, 0x31, 0x15, 0x9C, 0xAE, 0x03, 0xCE, 0xE9,
                0xD9, 0x93, 0x21, 0x84, 0xBE, 0xEF, 0x21, 0x6B,
                0xD7, 0x1D, 0xF2, 0xDA, 0xDF, 0x86, 0xA6, 0x27,
                0x30, 0x6E, 0xCF, 0xF9, 0x6D, 0xBB, 0x8B, 0xAC,
                0xE1, 0x98, 0xB6, 0x1E, 0x00, 0xF8, 0xB3, 0x32
            };

            const util::ui8 RFC5639_512_N_T[64] = {
                0xAA, 0xDD, 0x9D, 0xB8, 0xDB, 0xE9, 0xC4, 0x8B,
                0x3F, 0xD4, 0xE6, 0xAE, 0x33, 0xC9, 0xFC, 0x07,
                0xCB, 0x30, 0x8D, 0xB3, 0xB3, 0xC9, 0xD2, 0x0E,
                0xD6, 0x63, 0x9C, 0xCA, 0x70, 0x33, 0x08, 0x70,
                0x55, 0x3E, 0x5C, 0x41, 0x4C, 0xA9, 0x26, 0x19,
                0x41, 0x86, 0x61, 0x19, 0x7F, 0xAC, 0x10, 0x47,
                0x1D, 0xB1, 0xD3, 0x81, 0x08, 0x5D, 0xDA, 0xDD,
                0xB5, 0x87, 0x96, 0x82, 0x9C, 0xA9, 0x00, 0x69
            };

            const util::ui8 RFC5639_512_C_T[1] = {
                0x01
            };

            EllipticCurve rfc5639curves[] = {
                {RFC5639_160_P, 20,
                 RFC5639_160_A, 20,
                 RFC5639_160_B, 20,
                 RFC5639_160_GX, 20,
                 RFC5639_160_GY, 20,
                 RFC5639_160_N, 20,
                 RFC5639_160_C, 1},
                {RFC5639_160_P_T, 20,
                 RFC5639_160_A_T, 20,
                 RFC5639_160_B_T, 20,
                 RFC5639_160_GX_T, 20,
                 RFC5639_160_GY_T, 20,
                 RFC5639_160_N_T, 20,
                 RFC5639_160_C_T, 1},
                {RFC5639_192_P, 24,
                 RFC5639_192_A, 24,
                 RFC5639_192_B, 24,
                 RFC5639_192_GX, 24,
                 RFC5639_192_GY, 24,
                 RFC5639_192_N, 24,
                 RFC5639_192_C, 1},
                {RFC5639_192_P_T, 24,
                 RFC5639_192_A_T, 24,
                 RFC5639_192_B_T, 24,
                 RFC5639_192_GX_T, 24,
                 RFC5639_192_GY_T, 24,
                 RFC5639_192_N_T, 24,
                 RFC5639_192_C_T, 1},
                {RFC5639_224_P, 28,
                 RFC5639_224_A, 28,
                 RFC5639_224_B, 28,
                 RFC5639_224_GX, 28,
                 RFC5639_224_GY, 28,
                 RFC5639_224_N, 28,
                 RFC5639_224_C, 1},
                {RFC5639_224_P_T, 28,
                 RFC5639_224_A_T, 28,
                 RFC5639_224_B_T, 28,
                 RFC5639_224_GX_T, 28,
                 RFC5639_224_GY_T, 28,
                 RFC5639_224_N_T, 28,
                 RFC5639_224_C_T, 1},
                {RFC5639_256_P, 32,
                 RFC5639_256_A, 32,
                 RFC5639_256_B, 32,
                 RFC5639_256_GX, 32,
                 RFC5639_256_GY, 32,
                 RFC5639_256_N, 32,
                 RFC5639_256_C, 1},
                {RFC5639_256_P_T, 32,
                 RFC5639_256_A_T, 32,
                 RFC5639_256_B_T, 32,
                 RFC5639_256_GX_T, 32,
                 RFC5639_256_GY_T, 32,
                 RFC5639_256_N_T, 32,
                 RFC5639_256_C_T, 1},
                {RFC5639_320_P, 40,
                 RFC5639_320_A, 40,
                 RFC5639_320_B, 40,
                 RFC5639_320_GX, 40,
                 RFC5639_320_GY, 40,
                 RFC5639_320_N, 40,
                 RFC5639_320_C, 1},
                {RFC5639_320_P_T, 40,
                 RFC5639_320_A_T, 40,
                 RFC5639_320_B_T, 40,
                 RFC5639_320_GX_T, 40,
                 RFC5639_320_GY_T, 40,
                 RFC5639_320_N_T, 40,
                 RFC5639_320_C_T, 1},
                {RFC5639_384_P, 48,
                 RFC5639_384_A, 48,
                 RFC5639_384_B, 48,
                 RFC5639_384_GX, 48,
                 RFC5639_384_GY, 48,
                 RFC5639_384_N, 48,
                 RFC5639_384_C, 1},
                {RFC5639_384_P_T, 48,
                 RFC5639_384_A_T, 48,
                 RFC5639_384_B_T, 48,
                 RFC5639_384_GX_T, 48,
                 RFC5639_384_GY_T, 48,
                 RFC5639_384_N_T, 48,
                 RFC5639_384_C_T, 1},
                {RFC5639_512_P, 64,
                 RFC5639_512_A, 64,
                 RFC5639_512_B, 64,
                 RFC5639_512_GX, 64,
                 RFC5639_512_GY, 64,
                 RFC5639_512_N, 64,
                 RFC5639_512_C, 1},
                {RFC5639_512_P_T, 64,
                 RFC5639_512_A_T, 64,
                 RFC5639_512_B_T, 64,
                 RFC5639_512_GX_T, 64,
                 RFC5639_512_GY_T, 64,
                 RFC5639_512_N_T, 64,
                 RFC5639_512_C_T, 1}
            };
        }

        Params::SharedPtr EC::ParamsFromRFC5639Curve (
                RFC5639Curve curve,
                const ID &id,
                const std::string &name,
                const std::string &description) {
            return ParamsFromEllipticCurve (rfc5639curves[curve], id, name, description);
        }

        Params::SharedPtr EC::ParamsFromEd25519Curve (
                const ID &id,
                const std::string &name,
                const std::string &description) {
            return Params::SharedPtr (new Ed25519Params (id, name, description));
        }

        Params::SharedPtr EC::ParamsFromX25519Curve (
                const ID &id,
                const std::string &name,
                const std::string &description) {
            return Params::SharedPtr (new X25519Params (id, name, description));
        }

        Params::SharedPtr EC::ParamsFromCurveName (
                const std::string &curveName,
                const ID &id,
                const std::string &name,
                const std::string &description) {
            if (curveName == "RFC5114_CURVE_192") {
                return ParamsFromRFC5114Curve (RFC5114_CURVE_192, id, name, description);
            }
            else if (curveName == "RFC5114_CURVE_224") {
                return ParamsFromRFC5114Curve (RFC5114_CURVE_224, id, name, description);
            }
            else if (curveName == "RFC5114_CURVE_256") {
                return ParamsFromRFC5114Curve (RFC5114_CURVE_256, id, name, description);
            }
            else if (curveName == "RFC5114_CURVE_384") {
                return ParamsFromRFC5114Curve (RFC5114_CURVE_384, id, name, description);
            }
            else if (curveName == "RFC5114_CURVE_521") {
                return ParamsFromRFC5114Curve (RFC5114_CURVE_521, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_160") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_160, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_160_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_160_T, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_192") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_192, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_192_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_192_T, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_224") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_224, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_224_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_224_T, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_256") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_256, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_256_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_256_T, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_320") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_320, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_320_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_320_T, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_384") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_384, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_384_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_384_T, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_512") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_512, id, name, description);
            }
            else if (curveName == "RFC5639_CURVE_512_T") {
                return ParamsFromRFC5639Curve (RFC5639_CURVE_512_T, id, name, description);
            }
            else if (curveName == Ed25519AsymmetricKey::KEY_TYPE) {
                return ParamsFromEd25519Curve (id, name, description);
            }
            else if (curveName == X25519AsymmetricKey::KEY_TYPE) {
                return ParamsFromX25519Curve (id, name, description);
            }
            else {
                THEKOGANS_UTIL_THROW_STRING_EXCEPTION (
                    "Unknown curve name: %s",
                    curveName.c_str ());
            }
        }

    } // namespace crypto
} // namespace thekogans
